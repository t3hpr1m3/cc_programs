--[[
-- Simple program to control my Forestry tree farm.
--
-- Computer is connected via MFR RedNet cables to TE Steam engines, which power
-- a Redstone Energy Cell.  The Cell is used to power both the farm, as well as a
-- small ME Network that stores the output of the farm.
--
-- The Energy Cell is located directly behind the computer, so it can be
-- queried without using any sort of gate.
--
-- The computer sits right below the farm's Control block, and allows the farm
-- to be turned on/off with a redstone signal.
--]]

-- Constants for the various bits, in case I ever need to rearrange.
local ENGINE_COLOR = colors.white
local ENGINE_SIDE = "bottom"

local CELL_SIDE = "back"

local FARM_SIDE = "top"

-- Set the engine status to nil initially, so it is force-read on the first
-- iteration of the processing loop.
local engineStatus = nil

local w, h = term.getSize()

function progressBar(label, percentage, y_pos)
	local w, h = term.getSize()
	local x = term.getCursorPos()
	local barWidth, progressString
	term.setCursor(1, y_pos)
	term.clearLine()
	term.write(label)
	term.write("[")
	x, y = term.getCursorPos()
	barWidth = w - x
	term.setCursorPos(w, y_pos)
	term.write("]")
	term.setCursorPos(x, y_pos)
	for i = 1, math.floor(barWidth * percentage) do
		term.write("#")
	end
	progressString = " " .. math.floor(percentage * 100) .. "% "
	term.setCursorPos(w - (barWidth / 2) - (#progressString / 2), y)
	term.write(progressString)
end

--[[
-- Retrieves the status of the Steam engines
--]]
function getEngineStatus()
	if engineStatus == nil then
		engineStatus = (redstone.getBundledOutput(ENGINE_SIDE) ~= ENGINE_COLOR)
	end
	return engineStatus
end

--[[
-- Sets the Steam engines to the desired state (unless they're already there).
--]]
function setEngineStatus(status)
	if status ~= getEngineStatus() then
		local color = status and 0 or ENGINE_COLOR
		redstone.setBundledOutput(ENGINE_SIDE, color)
		engineStatus = status
		printEngineStatus()
	end
end

--[[
-- Dumps the engine status to the screen.
--]]
function printEngineStatus()
	local status = getEngineStatus()
	term.setCursorPos(1, 2)
	term.clearLine()
	term.write("Engines: ")
	if status == true then
		term.write("     ON")
	else
		term.write("OFF")
	end
end

--[[
-- Dumps the Energy cell data to the screen.
--]]
function printCellStats(cell)
	local x, y, i, barWidth, current, currentString
	term.setCursorPos(1, 1)
	term.clearLine()
	term.write("Cell:    [")
	x, y = term.getCursorPos()
	barWidth = w - x
	term.setCursorPos(w, 1)
	term.write("]")
	term.setCursorPos(x, 1)
	for i = 1, math.floor(barWidth * cell.percentage) do
		term.write("#")
	end
	currentString = " " .. math.floor(cell.percentage * 100) .. "% "
	term.setCursorPos(w - (barWidth / 2) - (#currentString / 2), y)
	term.write(currentString)
end

--[[
-- Turns the farm on/off.
--]]
function toggleFarmStatus()
	redstone.setOutput(FARM_SIDE, not (redstone.getOutput(FARM_SIDE)))
	printFarmStatus()
	saveFarmStatus()
end

--[[
-- Dumps the farm status to the screen.
--]]
function printFarmStatus()
	local disabled = redstone.getOutput(FARM_SIDE)
	term.setCursorPos(1, 3)
	term.clearLine()
	term.write("Farm:    ")
	if disabled == false then
		term.write("     ON")
	else
		term.write("OFF")
	end
end

function saveFarmStatus()
	f = fs.open("farm_status", "w")
	if redstone.getOutput(FARM_SIDE) == true then
		f.writeLine("0")
	else
		f.writeLine("1")
	end
	f.close
end

function readFarmStatus()
	local f = fs.open("farm_status", "r")
	if f == nil then
		redstone.setOutput(FARM_SIDE, true)
		saveFarmStatus()
	else
		local d = f.readLine()
		f.close()
		if d == "1" then
			return true
		else
			return false
		end
	end
end

-- Number of seconds to wait between loop iterations
local interval = 5

-- Wrap up the energy cell
local cell = EnergyCell.create(CELL_SIDE)

-- Print the initial "menu"
term.clear()
term.setCursorPos(1, 6)
term.clearLine()
term.write("Press 'T' to toggle the farm status.")
term.setCursorPos(1, 7)
term.clearLine()
term.write("Press 'E' to force the engines to 'ON'.")
term.setCursorPos(1, 8)
term.clearLine()
term.write("Press 'Q' to exit.")

-- Turn the farm on/off depending on its last state
if getFarmStatus() == false then
	redstone.setOutput(FARM_SIDE, true)
end

-- Do an initial dump of the stats
cell:poll()
progressBar("Cell:    ", cell.percentage, 1)
--printCellStats(cell)
printEngineStatus()
printFarmStatus()

-- This timer just "primes the pump" so our loop logic gets executed
-- immediately the first time through.
local timer = os.startTimer(0)

local looping = true

-- Main processing loop
while looping do
	local event, p1, p2, p3 = os.pullEvent()
	if event == "timer" then
		--[[
		-- TIMER events
		--]]
		cell:poll()
		progressBar("Cell:    ", cell.percentage, 1)
		printCellStats(cell)
		printFarmStatus()
		if cell.drained == true then
			setEngineStatus(true)
		elseif cell.full == true then
			setEngineStatus(false)
		end
		os.startTimer(interval)
	elseif event == "key" then
		--[[
		-- KEY events
		--]]
		if keys.getName(p1) == "t" then
			toggleFarmStatus()
		elseif keys.getName(p1) == "e" then
			setEngineStatus(true)
		elseif keys.getName(p1) == "q" then
			term.clear()
			term.setCursorPos(1, 1)
			print("Exiting...")
			looping = false
			os.queueEvent("dummy")
			os.pullEvent()
		end
	end
end
