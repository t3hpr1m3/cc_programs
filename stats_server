os.loadAPI('vUtils')
--[[
 Monitored Resources:
  LAVA_TANK
 Messages:
  RESET
--]]

local MONITOR_ID = "monitor_0"

function buildTankTable(tanks)
	local offset = 0
	local barWidth = 0
	for i, t in pairs(tanks) do
		pxOffset = offset * 20
		t["label"] = t["liquid"] .. " Tank #" .. i
	end
	return tanks
end

-- Open the wired network
local net = peripheral.wrap("back")
net.open(1)

-- Open the monitor
local monitor = peripheral.wrap("monitor_0")
monitor.clear()
local w, h = monitor.getSize()

term.clear()
term.setCursorPos(1,1)

local tanks = nil

local looping = true
local interval = 5
local timer = os.startTimer(0)
local x, y, barWidth, progress = 0
local progressString = ""

while looping do
	local event, p1, p2, p3, p4, p5 = os.pullEvent()
	if event == "timer" then
		net.transmit(2, 1, "GET_STATS")
		os.startTimer(interval)
	elseif event == "modem_message" then
		-- Process stat response
		print("Received STATS response")
		message = textutils.unserialize(p4)
		if message["TANK_DATA"] ~= nil then
			tanks = buildTankTable(message["TANK_DATA"])
		end
		monitor.clear()
		term.redirect(monitor)
		for i, t in pairs(tanks) do
			vUtils.progressBar(t["label"] .. " ", t["percentage"], i)
		end
		term.restore()
	elseif (event == "key" and p1 == 16) then
		term.clear()
		term.setCursorPos(1, 1)
		print("Exiting...")
		looping = false
		os.queueEvent("dummy")
		os.pullEvent()
	end
end
