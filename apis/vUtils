function printTable(t, indent)
	if not indent then indent = 0 end
	for key, value in pairs(t) do
		formatting = string.rep(" ", indent) .. key .. ": "
		if type(value) == "table" then
			print(formatting)
			print_table(value, indent + 2)
		else
			print(formatting .. tostring(value))
		end
	end
end

function progressBar(label, percentage, y_pos)
	local w, h = term.getSize()
	local x = term.getCursorPos()
	local barWidth, progressString
	term.setCursorPos(1, y_pos)
	term.clearLine()
	term.write(label)
	term.write("[")
	x, y = term.getCursorPos()
	barWidth = w - x
	term.setCursorPos(w, y_pos)
	term.write("]")
	term.setCursorPos(x, y_pos)
	for i = 1, math.floor(barWidth * percentage) do
		term.write("#")
	end
	progressString = " " .. math.floor(percentage * 100) .. "% "
	term.setCursorPos(w - (barWidth / 2) - (#progressString / 2), y)
	term.write(progressString)
end

function printToggle(label, status, y_pos)
	term.setCursorPos(1, y_pos)
	term.clearLine()
	term.write(label)
	if status == true then
		term.write("     ON")
	else
		term.write("OFF")
	end
end

-- The Tank class
Tank = {}
Tank.__index = Tank

function Tank.create(s)
	assert(type(s) == "string", "Tank.create() expects argument 'side' to be a valid side.")
	assert(Tank.isTank(s) == true, "Tank.create(): No valve found on side " .. s .. ".")

	local t = {}
	setmetatable(t, Tank)

	t.p = peripheral.wrap(s)
	t.side = s
	t.capacity = 0
	t.current = 0
	t.liquid = ''
	return t
end

function Tank.get_attached_tanks()
	local t = {}
	local sides = rs.getSides()
	for i = 1, #sides do
		if Tank.isTank(sides[i]) then
			table.insert(t, Tank.create(sides[i]))
		end
	end
	return t
end

-- Is there a tank attached to a particular side of the computer?
function Tank.isTank(side)
	return (peripheral.isPresent(side) and peripheral.getType(side) == "iron_tank_valve")
end

-- Retrieve the data from RailCraft
function Tank:fetchData()
	local d = self.p.getTanks(self.side)[1]
	self.capacity = d.capacity
	self.current = d.amount
	self.liquid = d.name
end

-- The Energy Cell class
EnergyCell = {}
EnergyCell.__index = EnergyCell

function EnergyCell.create(s)
	assert(type(s) == "string", "EnergyCell.create() expects argument 'side' to be a valid side.")
	assert(EnergyCell.isEnergyCell(s) == true, "EnergyCell.create(): No EnergyCell found on side " .. s .. ".")

	local e = {}
	setmetatable(e, EnergyCell)

	e.p = peripheral.wrap(s)
	e.side = s
	e.capacity = 0
	e.current = 0
	e.percentage = 0
	e.full = false
	e.drained = false
	return e
end

function EnergyCell.isEnergyCell(side)
	return (peripheral.isPresent(side) and peripheral.getType(side) == "redstone_energy_cell")
end

function EnergyCell:poll()
	local d = self.p.getPowerProvider()
	self.capacity = d["maxEnergyStored"]
	self.current = d["energyStored"]
	self.percentage = self.current / self.capacity
	self.full = self.current == self.capacity
	self.drained = self.percentage < .1
end
